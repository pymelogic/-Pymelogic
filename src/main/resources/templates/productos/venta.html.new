<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Nueva Venta - PymeLogic</title>
    <!-- Estilos compartidos -->
    <th:block th:replace="fragments/common :: headerStyles"></th:block>
    <!-- Estilos específicos de venta -->
    <style>
        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            padding: 1rem;
        }

        /* Mensajes de error */
        .error-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
            padding: 15px;
            border-radius: 4px;
            z-index: 1000;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: none;
        }

        /* Contenedor principal */
        .amazon-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            padding: 20px;
            min-height: calc(100vh - 60px);
            background-color: #f3f3f3;
        }

        /* Sección de productos */
        .products-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .search-bar {
            margin-bottom: 20px;
            position: relative;
        }

        .search-bar input {
            width: 100%;
            padding: 12px 40px 12px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        .search-bar .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .product-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .product-image {
            width: 120px;
            height: 120px;
            object-fit: contain;
            margin-bottom: 10px;
        }

        .product-name {
            font-size: 14px;
            margin-bottom: 8px;
            height: 40px;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .product-price {
            font-size: 18px;
            font-weight: bold;
            color: #B12704;
            margin-bottom: 10px;
        }

        .product-stock {
            font-size: 12px;
            color: #007600;
            margin-bottom: 10px;
        }

        /* Carrito */
        .cart-section {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            position: sticky;
            top: 20px;
            max-height: calc(100vh - 100px);
            display: flex;
            flex-direction: column;
        }

        .cart-header {
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

        .cart-items {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 15px;
        }

        .cart-item {
            display: flex;
            align-items: start;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .cart-item-details {
            flex-grow: 1;
            padding: 0 10px;
        }

        .cart-item-name {
            font-size: 14px;
            margin-bottom: 5px;
        }

        .cart-item-price {
            color: #B12704;
            font-weight: bold;
        }

        .cart-item-quantity {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 5px;
        }

        .quantity-btn {
            border: 1px solid #ddd;
            background: white;
            width: 24px;
            height: 24px;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .cart-summary {
            border-top: 1px solid #ddd;
            padding-top: 15px;
        }

        .cart-total {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
        }

        .btn-checkout {
            width: 100%;
            padding: 12px;
            background: #FFD814;
            border: 1px solid #FCD200;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-checkout:hover {
            background: #F7CA00;
        }

        .cart-empty {
            text-align: center;
            color: #666;
            padding: 20px 0;
        }

        /* Scanner y cámara */
        .scanner-section {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            padding: 20px;
        }

        .scanner-container {
            background: white;
            max-width: 800px;
            margin: 40px auto;
            border-radius: 8px;
            padding: 20px;
        }

        .scanner-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .scanner-content {
            position: relative;
        }

        #video {
            width: 100%;
            border-radius: 4px;
        }

        .scanner-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 200px;
            height: 200px;
            border: 2px solid #00ff00;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="amazon-container">
        <!-- Sección de productos -->
        <div class="products-section">
            <div class="search-bar">
                <input type="text" id="serial-input" placeholder="Buscar por código o nombre del producto...">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Productos</h5>
                <button class="btn btn-outline-primary" id="btn-open-camera">
                    <i class="fas fa-camera"></i> Escanear código
                </button>
            </div>
            <div class="products-grid" id="products-grid">
                <!-- Los productos se cargarán dinámicamente aquí -->
            </div>
        </div>

        <!-- Carrito -->
        <div class="cart-section">
            <div class="cart-header">
                <h5 class="mb-0">
                    <i class="fas fa-shopping-cart"></i>
                    Carrito de compra
                </h5>
            </div>
            <div class="cart-items" id="cart-items">
                <!-- Items del carrito se cargarán aquí -->
                <div class="cart-empty">
                    <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                    <p>Tu carrito está vacío</p>
                </div>
            </div>
            <div class="cart-summary">
                <div class="cart-total">
                    Total: <span id="cart-total">$0.00</span>
                </div>
                <button class="btn-checkout" id="btn-finalizar">
                    <i class="fas fa-check me-2"></i>Finalizar compra
                </button>
            </div>
        </div>
    </div>

    <!-- Scanner Modal -->
    <div class="scanner-section" id="scanner-section">
        <div class="scanner-container">
            <div class="scanner-header">
                <h5 class="mb-0">Escanear código</h5>
                <button class="btn-close" id="btn-close-scanner"></button>
            </div>
            <div class="scanner-content">
                <video id="video" autoplay playsinline></video>
                <div class="scanner-overlay"></div>
            </div>
        </div>
    </div>

    <!-- Template para items del carrito -->
    <template id="cart-item-template">
        <div class="cart-item" data-id="">
            <div class="cart-item-details">
                <div class="cart-item-name"></div>
                <div class="cart-item-price"></div>
                <div class="cart-item-quantity">
                    <button class="quantity-btn btn-decrease">-</button>
                    <span class="quantity-value">1</span>
                    <button class="quantity-btn btn-increase">+</button>
                </div>
            </div>
            <button class="btn btn-sm btn-link text-danger btn-remove">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    </template>

    <script th:inline="javascript">
        document.addEventListener('DOMContentLoaded', function() {
            const serialInput = document.getElementById('serial-input');
            const btnOpenCamera = document.getElementById('btn-open-camera');
            const scannerSection = document.getElementById('scanner-section');
            const btnCloseScanner = document.getElementById('btn-close-scanner');
            const productsGrid = document.getElementById('products-grid');
            const cartItems = document.getElementById('cart-items');
            const cartTotal = document.getElementById('cart-total');
            const btnCheckout = document.getElementById('btn-finalizar');
            const video = document.getElementById('video');

            let carrito = [];
            let stream = null;

            // Búsqueda de productos
            serialInput.addEventListener('input', async (e) => {
                const query = e.target.value.trim();
                if (query.length < 2) return;
                
                try {
                    const res = await fetch(`/api/productos/buscar?q=${encodeURIComponent(query)}`);
                    if (res.ok) {
                        const productos = await res.json();
                        renderizarProductos(productos);
                    }
                } catch (err) {
                    console.error('Error buscando productos:', err);
                    mostrarError('Error al buscar productos');
                }
            });

            // Función para renderizar productos
            function renderizarProductos(productos) {
                productsGrid.innerHTML = productos.map(p => `
                    <div class="product-card" data-id="${p.id}">
                        <img src="${p.imagen || '/images/no-image.png'}" class="product-image" alt="${p.nombre}">
                        <div class="product-name">${p.nombre}</div>
                        <div class="product-price">$${p.precio.toFixed(2)}</div>
                        <div class="product-stock">${p.stock} disponibles</div>
                        <button class="btn btn-primary btn-sm w-100" onclick="agregarAlCarrito(${p.id})">
                            <i class="fas fa-cart-plus"></i> Agregar
                        </button>
                    </div>
                `).join('');
            }

            // Agregar producto al carrito
            window.agregarAlCarrito = async function(productoId) {
                try {
                    const res = await fetch(`/api/productos/${productoId}`);
                    if (res.ok) {
                        const producto = await res.json();
                        const existente = carrito.find(item => item.id === producto.id);
                        
                        if (existente) {
                            if (existente.cantidad < producto.stock) {
                                existente.cantidad++;
                            } else {
                                mostrarError('Stock máximo alcanzado');
                                return;
                            }
                        } else {
                            carrito.push({...producto, cantidad: 1});
                        }
                        
                        actualizarCarrito();
                    }
                } catch (err) {
                    console.error('Error agregando producto:', err);
                    mostrarError('Error al agregar el producto');
                }
            };

            // Actualizar carrito
            function actualizarCarrito() {
                if (carrito.length === 0) {
                    cartItems.innerHTML = `
                        <div class="cart-empty">
                            <i class="fas fa-shopping-cart fa-2x mb-2"></i>
                            <p>Tu carrito está vacío</p>
                        </div>
                    `;
                } else {
                    cartItems.innerHTML = carrito.map(item => `
                        <div class="cart-item" data-id="${item.id}">
                            <div class="cart-item-details">
                                <div class="cart-item-name">${item.nombre}</div>
                                <div class="cart-item-price">$${(item.precio * item.cantidad).toFixed(2)}</div>
                                <div class="cart-item-quantity">
                                    <button class="quantity-btn" onclick="actualizarCantidad(${item.id}, ${item.cantidad - 1})">-</button>
                                    <span>${item.cantidad}</span>
                                    <button class="quantity-btn" onclick="actualizarCantidad(${item.id}, ${item.cantidad + 1})">+</button>
                                </div>
                            </div>
                            <button class="btn btn-sm btn-link text-danger" onclick="eliminarDelCarrito(${item.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('');
                }
                
                const total = carrito.reduce((sum, item) => sum + (item.precio * item.cantidad), 0);
                cartTotal.textContent = `$${total.toFixed(2)}`;
            }

            // Actualizar cantidad
            window.actualizarCantidad = function(id, nuevaCantidad) {
                const item = carrito.find(i => i.id === id);
                if (!item) return;
                
                if (nuevaCantidad <= 0) {
                    carrito = carrito.filter(i => i.id !== id);
                } else {
                    item.cantidad = nuevaCantidad;
                }
                
                actualizarCarrito();
            };

            // Eliminar del carrito
            window.eliminarDelCarrito = function(id) {
                carrito = carrito.filter(item => item.id !== id);
                actualizarCarrito();
            };

            // Finalizar compra
            btnCheckout.addEventListener('click', async () => {
                if (carrito.length === 0) {
                    mostrarError('El carrito está vacío');
                    return;
                }

                try {
                    const res = await fetch('/api/ventas', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            items: carrito.map(item => ({
                                productoId: item.id,
                                cantidad: item.cantidad
                            }))
                        })
                    });

                    if (res.ok) {
                        const venta = await res.json();
                        carrito = [];
                        actualizarCarrito();
                        alert('Venta realizada con éxito');
                    } else {
                        const error = await res.json();
                        throw new Error(error.message || 'Error al procesar la venta');
                    }
                } catch (err) {
                    console.error('Error en la venta:', err);
                    mostrarError(err.message || 'Error al procesar la venta');
                }
            });

            // Escanear código
            btnOpenCamera.addEventListener('click', () => {
                scannerSection.style.display = 'block';
                startScanner();
            });

            btnCloseScanner.addEventListener('click', () => {
                scannerSection.style.display = 'none';
                stopScanner();
            });

            async function startScanner() {
                try {
                    stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
                    video.srcObject = stream;
                } catch (err) {
                    console.error('Error accessing camera:', err);
                    mostrarError('No se pudo acceder a la cámara');
                }
            }

            function stopScanner() {
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
            }

            // Función para mostrar errores
            function mostrarError(mensaje) {
                let errorDiv = document.querySelector('.error-message');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    document.body.appendChild(errorDiv);
                }
                errorDiv.textContent = mensaje;
                errorDiv.style.display = 'block';
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                }, 5000);
            }

            // Inicializar la búsqueda de productos al cargar
            fetch('/api/productos/buscar?q=')
                .then(res => res.json())
                .then(productos => renderizarProductos(productos))
                .catch(err => {
                    console.error('Error cargando productos:', err);
                    mostrarError('Error al cargar los productos');
                });
        });
    </script>
</body>
</html>
